name: 'Run SpecFlow Tests'
description: 'A Github Action to run SpecFlow tests and create a LivingDoc'
author: 'cryptic-wizard'
branding:
  icon: check-square
  color: green

inputs:
  test-assembly-path:
    description: "Path of the working directory of for build assemblies (example: MySpecflowProject/bin/Debug/netcoreapp3.1)"
    required: false
    default: 'null'
  test-assembly-dll:
    description: "Relative path of <MySpecflowProject.dll> (example: MySpecflowProject/bin/Debug/netcoreapp3.1/MySpecflowProject.dll)"
    required: true
  test-execution-json:
    description: "Relative path of <MySpecflowProjectTestExecution(s).json> (example: MySpecflowProject/bin/Debug/netcoreapp3.1/TestExecution.json)"
    required: true
  output-html:
    description: "Name of Specflow LivingDoc output file (must end with .html) (example: MyTestResults.html)"
    required: false
    default: 'LivingDoc.html'
  build-verbosity:
    description: "Verbosity of the Dotnet App Build (default = minimal)"
    required: false
    default: 'minimal'
  test-verbosity:
    description: "Verbosity of the SpecFlow Test Execution (default = normal)"
    required: false
    default: 'normal'
  configuration:
    description: "Build configuration (example: Debug)"
    required: false
    default: 'Release'
  no-build:
    description: "Set to true to disable dotnet build and dotnet restore"
    required: false
    default: 'false'
  logger:
    description: "Dotnet test logger to run in addition to Specflow Test Logger (example: trx)"
    required: false
    default: 'null'
  logger-file-name:
    description: "Dotnet test log file name; required if logger is defined (example: MyTestResults.trx)"
    required: false
    default: 'null'
  dotnet-version:
    description: "Version of dotnet (example: netcoreapp3.1, net5.0)"
    required: false
    default: 'null'
  #upload-artifact: TODO on composite action 'uses'
    #description: "Set to false to disable uploading <LivingDoc.html> artifact automatically"
    #required: false
    #default: 'true'
runs:
  using: composite
  steps:
    #- name: Checkout TODO on composite action 'uses'
      #uses: actions/checkout@v2
    #- name: Setup .NET Core
      #uses: actions/setup-dotnet@v1
      #with:
        #dotnet-version: 3.1.x
    - name: BuildDotnetApp
      run: |
        if [ ${{ inputs.no-build }} == 'true' ]; then
          echo 'Build Skipped'
        elif [ ${{ inputs.dotnet-version }} == 'null' ]; then
          dotnet build -c ${{ inputs.configuration }} -v ${{ inputs.build-verbosity }}
        else
          dotnet build -c ${{ inputs.configuration }} -v ${{ inputs.build-verbosity }} -f ${{ inputs.dotnet-version }}
        fi
      shell: bash
    - name: RunSpecFlowTests
      run: |
        if   [ ${{ inputs.logger }} == 'null' ] || [ ${{ inputs.logger-file-name }} == 'null' ] && [ ${{ inputs.dotnet-version }} == 'null' ]; then
          dotnet test --no-build -c ${{ inputs.configuration }} -v ${{ inputs.test-verbosity }}
        elif [ ${{ inputs.logger }} == 'null' ] || [ ${{ inputs.logger-file-name }} == 'null' ]; then
          dotnet test --no-build -c ${{ inputs.configuration }} -v ${{ inputs.test-verbosity }} -f ${{ inputs.dotnet-version }}
        elif [ ${{ inputs.dotnet-version }} == 'null' ]; then
          dotnet test --no-build -c ${{ inputs.configuration }} -v ${{ inputs.test-verbosity }} -l "${{ inputs.logger }};verbosity=${{ inputs.test-verbosity }};LogFileName=${{ inputs.logger-file-name }}"
        else
          dotnet test --no-build -c ${{ inputs.configuration }} -v ${{ inputs.test-verbosity }} -f ${{ inputs.dotnet-version }} -l "${{ inputs.logger }};verbosity=${{ inputs.test-verbosity }};LogFileName=${{ inputs.logger-file-name }}"
        fi
      shell: bash
    - name: GenerateSpecFlowLivingDoc
      run: |
        dotnet tool install --global SpecFlow.Plus.LivingDoc.CLI
        if [ ${{ inputs.test-assembly-path }} != 'null' ]; then
          livingdoc test-assembly ${{ inputs.test-assembly-path }}/${{ inputs.test-assembly-dll }} -t ${{ inputs.test-assembly-path }}/${{ inputs.test-execution-json }} -o ${{ inputs.output-html }}
        else
          livingdoc test-assembly ${{ inputs.test-assembly-dll }} -t ${{ inputs.test-execution-json }} -o ${{ inputs.output-html }}
        fi
      shell: bash
    #- name: 'Publish Specflow Test Results'
      #uses: actions/upload-artifact@v2
      #with:
        #name: 'Specflow Test Results'
        #path: ${{ output-html }}
